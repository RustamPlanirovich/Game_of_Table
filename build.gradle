// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.5.20'

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:2.37"
        classpath 'com.google.gms:google-services:4.3.8'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task upgradeVersion(type: Exec) {
    group 'help'
    description 'Build a new version'
    doLast {
        println("--- Automatic upgrade version number --- ")
        def versionProps = new Properties()
        def versionPropsFile = rootProject.file('version.properties')
        if (versionPropsFile.exists()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        String oldVersionCode = versionProps['versionCode']
        String oldVersionName = versionProps['versionName']
        if (oldVersionCode == null || oldVersionName == null ||
                oldVersionCode.isEmpty() || oldVersionName.isEmpty()) {
            println("Error: The version number cannot be empty")
            return;
        }
        versionProps['versionCode'] = String.valueOf(versionProps['versionCode'].toInteger() + 1)
        String str = versionProps['versionName'].toString()
        versionProps['versionName'] = str.substring(0, str.lastIndexOf('.') + 1) +
                (str.substring(str.lastIndexOf('.') + 1).toInteger() + 1)
        String tip =
                "Version number$oldVersionName($oldVersionCode)upgrade to${versionProps['versionName']}(${versionProps['versionCode']})"
        println(tip)

        def writer = new FileWriter(versionPropsFile)
        versionProps.store(writer, null)
        writer.flush()
        writer.close()
        def tag = "v${versionProps['versionName']}"

        commandLine("git pull")
        commandLine("git add version.properties")
        commandLine("Git Commit -M \" version number is upgraded to:$tag\"")
        commandLine("git push origin")
        commandLine("git tag $tag")
        commandLine("git push origin $tag")
        cmdExecute("git pull")

//        exec {
//            commandLine("git pull")
//            commandLine("git add version.properties")
//            commandLine("Git Commit -M \" version number is upgraded to:$tag\"")
//            commandLine("git push origin")
//            commandLine("git tag $tag")
//            commandLine("git push origin $tag")
//        }
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}

